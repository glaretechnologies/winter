
#has_binary_mult

#generic T : has_binary_mult

#def identity(int x) int : x

#def square<T>(T x) T : x * x

def f()

def main() float : 
	let z = [0.0, 1.0, 2.0, 3.0]v
	(e0(z) + e1(z)) + (e2(z) + e3(z))


#decl map<T1, T2>(function<T1, T2>, array<T1>) array<T2>
#decl fold<T>(function<T, T, T>, array<T>, T) T

#def addAnInt<T>(int a, T b, T c) T : a + b


#def sum(array<float> x) float :
#	fold(\(float y, float s) float : y + s, x, 0.0)

#def mul(array<float> x) float :
#	fold(\(float y, float s) float : y * s, x, 1.0)

#def addOneToElements(array<float> x) array<float> :
#	map(\(float y) float : (y + 1.0), x)





#def main() float :
#	fold(\(float y, float s) float : y + s, [1.0,2.0,3.0,4.0,5.0], 0.0)


#struct Complex
#{
#	float re,
#	float im
#}

#def complexFunc() Complex :
#	Complex(1.0, 2.0)
	
	
#def add (Complex a, Complex b) Complex : 
#	Complex(re(a) + re(b), im(a) + im(b))


#def funcWithLambdaArg(function<int, int> f, int x) int :
#	f(f(x))
	

#def stringFunc() string :
#	"bleh"

#def funcThatReturnsLambda() function<int> :
#	\() int : 10

#def main() float :
#	im(add(Complex(1.0, 4.0), Complex(10.0, 100.0)))
	
	
	
	
	#let z = \(int a) int : a + 1
	#funcWithLambdaArg(z, 3)
	




#def lambdaTest(int x) int :
#	let z = \(int a) int : a + 3
#	z(x)


#def test


#1 + 1 == 3 # comment
#dsfg


#def operator_add(complex x, complex y) complex : complex(re(x) + re(y), im(x) + im(y))



#c + d




#def e() map<int, int> : { g(1, 3) : e() , 666:777}

#def f(int x) int : 3 * x

#def g(int x, int y) int : x + x * x
#def h(int x, int y) int : (x + x) * x
#def i(int x, int y) int : x - x * x

#def g(float x, float y) float : x + y


#def square(int x) int : 
#	let y = f(x)
#	x*y



